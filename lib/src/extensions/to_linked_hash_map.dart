import 'dart:collection';

extension ToLinkedHashMapExtension<T> on Iterable<T> {
  /// Converts the iterable to a [LinkedHashMap].
  ///
  /// Iterates over the entire iterable, generating a [MapEntry] from each
  /// element with the [entrySelector] function then saving each generated
  /// entry in a [LinkedHashMap] under the generated key.
  ///
  /// If a duplicate key is produced, the value generated by a prior element is
  /// overwritten. As such, the length of the resulting [LinkedHashMap] is not guaranteed
  /// to be the same length as the iterable.
  ///
  /// Example:
  ///
  ///     void main() {
  ///       var list = [97, 98, 99];
  ///       var result = list.toLinkedHashMap((x) => MapEntry(x, String.fromCodeUnit(x)));
  ///
  ///       // Result: { 97: 'a', 98: 'b', 99: 'c' }
  ///     }
  Map<TKey, TValue> toLinkedHashMap<TKey, TValue>(
    MapEntry<TKey, TValue> Function(T element) entrySelector, {
    bool modifiable = true,
  }) {
    final map =
        LinkedHashMap.fromEntries([for (var o in this) entrySelector(o)]);
    if (modifiable) return map;
    return UnmodifiableMapView(map);
  }
}
